No contexto de bases de dados o relacionamento é algo utilizado para estruturar a base,
assim como otimizar o tempo de consultas, os tipos mais comuns de relacionamentos.  

1 - um para um 
    Por exeplo um pais pode ter uma capital 

2 - um para muitos 
    Uma mãe pode ter varios filhos registados no nome dela 

3 - muitos para muitos 
    Uma venda pode ter varios produtos, assim como um produto pode estar presente em varias vendas

esses dados podem ser ligados a outros apartir de chaves estrageiras ou de tabelas auxiliares,dependendo
da regra de negocio que administra a base de dados.

Criando uma relação de um para um usando o Eloquent 
 Eu vou começar relacionando um cliente a um telefone a relçao é estabelecida dentro de um model 
 por exemplo eu usei o model cliente para relacionar um cliente a um telefone.
 E importante saber que sempre que hopuver a necessidade de relacionar uma netidade a outra
 o primiero passo sempre vai ser no model da entidade.  

Aqui eu faço a relação de um para um entre clientes e telefones 

model Client 
------------------------------------------------------------
class Client extends Model
{
    public function phone():HasOne
    {
        return $this->hasOne(Phone::class);
    }
}
-----------------------------------------------------------

Aqui eu faço a relação de um para muitos entre clientes e telefones 
o nome do metodo é muito literal e isso ajudar bastante a entender oque esta acontecendo

model Cliente
-----------------------------------------------------

//estabelecendo a relaçao de um para muitos entre clientes e telefones
    public function phones():HasMany
    {
        return $this->hasMany(Phone::class);
    }

--------------------------------------------------------



Como o sistema sabe que existe uma relação entre esses dados ?
 Quando eu crio uma relação ebntre duas tabelas o Eloquent pre-supoe que existe uma ligação
 entre o telefone e o cliente na tabela telefone tem um campo chamdo client_id e isso liga 
 os telefones que o model Phone vai trazer ao id do cliente, mas se eu não tivesse feito isso 
 eu poderia avisar qual e a FK atraves dos paramentos da função HasMany.

 HasMany($related, $foreignKey = null, $localKey = null);

 agora com a relação estabelecida é hora de fazer a busca 

------------------------------------------------------------------------------
  public function oneToMany(){

        //buscar o cliente pelo id e mostrar todos os telefones dele

        //o id e unico para cada cliente então ele me tras 1 cliente

        $client1 = Client::find(10);

        //na tabela telefone ele id 10 esta presente em mais de um telefone
        //no campo client_id então qoue vem da lá é um array 

        $phones = $client1->phones;

        //mostrando o nome do cliente que tem o id 10

        echo'Nome do cliente : '.$client1->client_name.'<br>';

     
        echo'Telefones do cliente :<br>';


        // fazendo um loop no array de telefones para mostrar os telefones dele 

        foreach($phones as $phone){
            echo $phone->phone_number . '<br>'; 
        }

        

        
    }
------------------------------------------------------------------------------
 Relação inversa no caso a realçao inversa faz os telefones buscarem por seus donos
 Como foi dito no inicio as relções começam pelos models mas nesse caso 
 como eo telefone qu vai buscar o cliente então essa começa no Model Phone. 

Model Phone 
 ----------------------------------------------------------
 class Phone extends Model
{
    public function client()
    {
        // Relação inversa: um telefone pertence a um cliente
        return $this->belongsTo(Client::class, 'client_id');
    }
}
 -------------------------------------------------------------  






